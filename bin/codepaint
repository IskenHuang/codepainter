#!/usr/bin/env node

var colorize = require('colorize');
var fs = require('fs');
var path = require('path');
var	program = require('commander');
var spawn = require('child_process').spawn;

var codepainter = require('../codepainter');


program
	.version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
	.usage('[options] input output\n\n  CodePainter beautifies JavaScript.')
	.option('-e, --editor-config',			"use input file's EditorConfig settings")
	.option('-i, --infer <file>',			'code sample to infer')
	.option('-s, --setting <key>=<value>',	'an individual setting', setting)
	.option('-p, --predef <name>',			'a CodePainter predefined style')
	.option('-j, --json <file>',			'JSON file with style settings')
	.option('-C, --no-color',				'disable color escape codes');

var settings = {};

function keyValue(val, store) {
	val = val.split('=');
	try {
		val[1] = JSON.parse(val[1]);
	} catch(e){}
	store[val[0]] = val[1];
	return val;
}

function setting(val) {
  return keyValue(val, settings);
}

program.on('--help', function(){
	console.log('  Examples:');
	console.log('');
	console.log('    $ codepaint input.js output.js');
	console.log('    $ codepaint -e input.js output.js');
	console.log('    $ codepaint -i mycode.js input.js output.js');
	console.log('    $ codepaint -s indent_style=space -s indent_size=4 input.js output.js');
	console.log('    $ codepaint -p idiomatic input.js output.js');
	console.log('    $ codepaint -j company_style.json input.js output.js');
	console.log('');
});

program.parse(process.argv);

var cconsole = colorize.console;

var arglen = program.args.length;
if (arglen !== 2) {
	if (program.rawArgs.length > 2) {
		switch( arglen ) {
			case 0:
				cconsole.log('\n#red[Error: missing required parameters: input, output]');
				break;
			case 1:
				cconsole.log('\n#red[Error: missing required parameter: output]');
				break;
			default:
				cconsole.log('\n#red[Error: too many parameters specified]');
				break;
		}
	}
	program.outputHelp();
	process.exit(1);
}

var script = fs.realpathSync(__dirname + '/../codepainter.js');

var config = {
	input: program.input,
	output: program.output,
	useEditorConfig: program.editorConfig,
	infer: program.infer,
	predef: program.predef,
	json: program.json,
	settings: settings,
	useColors: program.color
};

// var input;
// if (argv.input === 'stdin') {
//     input = process.stdin;
// } else {
//     input = fs.createReadStream(argv.input);
//     input.pause();
// }
// input.setEncoding('utf-8');

// var output;
// if (argv.output === 'stdout') {
//     output = process.stdout;
// } else {
//     output = fs.createWriteStream(argv.output);
// }

// function transform(style) {
//     codepainter.transform(input, style, output);
// }

// function parseValue( value ) {
//     value = value.toLowerCase();
//     if( value === 'true' ) {
//         return true;
//     }
//     if( value === 'false' ) {
//         return false;
//     }
//     var iValue = parseInt( value, 10 );
//     if( iValue == value ) {
//         return iValue;
//     }
//     return value;
// }

// function convertEditorConfigPropsToObject( props ) {
//     var result = {};
//     props = props.match( /[^\s=]+\s*=\s*[^\s=]+/g );
//     for( var i = 0; i < props.length; i++ ) {
//         var pair = props[i].split('=');
//         result[ pair[0] ] = parseValue( pair[1] );
//     }
//     return result;
// }

// try {
//     if (typeof argv.style !== 'undefined') {

//         transform(argv.style);

//     } else if (typeof argv.stylefile !== 'undefined') {

//         transform(fs.readFileSync(argv.stylefile));

//     } else {

//         var style = {},
//             ec = spawn('../editorconfig-core/bin/release/editorconfig', [ path.resolve( argv.input )]);

//         ec.stdout.setEncoding('utf8');
//         ec.stdout.on('data', function( data ) {
//             style = convertEditorConfigPropsToObject( data );
//         });

//         ec.on('close', function(code) {
//             var keys = Object.keys( style );
//             if( keys.length ) {

//                 transform( style );

//             } else if( typeof argv.sample !== 'undefined' ) {

//                 var sample = fs.createReadStream(argv.sample);
//                 sample.pause();
//                 sample.setEncoding('utf-8');

//                 codepainter.infer(sample, transform);

//             } else {

//                 throw new Error( 'You must specify one of the following: ' +
//                     '.editorconfig file, sample file, style string or style file.' );

//             }
//         });

//     }
// } catch (e) {
//     console.error( 'Error: ' + e.message );
//     optimist.showHelp( console.error );
// }
