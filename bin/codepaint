#!/usr/bin/env node
const fs = require('fs');
const optimist = require('optimist');
const codepainter = require('../codepainter');

var argv = optimist.options({
    'input': {
        alias: 'i',
        'default': 'stdin',
        describe: 'File path to read from',
        type: 'string'
    },
    'output': {
        alias: 'o',
        'default': 'stdout',
        describe: 'File path to write to',
        type: 'string'
    },
    'sample': {
        alias: 's',
        describe: 'Code sample path to infer the style from',
        type: 'string'
    },
    'style': {
        describe: 'A predefined style or a JSON string describing the coding style',
        type: 'string'
    },
    'stylefile': {
        describe: 'File containing a JSON string describing the coding style',
        type: 'string'
    }
}).check(function (argv) {
	if ( typeof argv.sample === 'undefined' && typeof argv.style === 'undefined' && typeof argv.stylefile === 'undefined' ){
		throw new Error( 'You have to specify either a sample file or a style string or a style file.' );
	}
    return true;
})
.usage('CodePainter beautifies JavaScript.\nUsage: $0 [options]')
.argv;

var input;
if (argv.input === 'stdin') {
    input = process.stdin;
} else {
    input = fs.createReadStream(argv.input);
    input.pause();
}
input.setEncoding('utf-8');

var output;
if (argv.output === 'stdout')
    output = process.stdout;
else
    output = fs.createWriteStream(argv.output);

function transform(style) {
    codepainter.transform(input, style, output);
}

try {
	if (typeof argv.style !== 'undefined') {
	
		transform(argv.style);

	} else if (typeof argv.stylefile !== 'undefined') {

		transform(fs.readFileSync (argv.stylefile));

	} else {
		var sample;
		sample = fs.createReadStream(argv.sample);
		sample.pause();
		sample.setEncoding('utf-8');
    
		codepainter.infer(sample, transform);
	}
} catch (e) {
	console.error( 'Error: ' + e.message );
	optimist.showHelp( console.error );
}

